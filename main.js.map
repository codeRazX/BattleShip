{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/js/Ship.js","webpack://battleship/./src/js/GameBoard.js","webpack://battleship/./src/js/UI.js","webpack://battleship/./src/js/Player.js","webpack://battleship/./src/js/index.js"],"sourcesContent":["class Ship{\r\n\r\n  constructor(length,symbol){\r\n    this.length = length;\r\n    this.hits = 0;\r\n    this.sunk = false;\r\n    this.symbol = symbol;\r\n    this.isPlaced = false;\r\n  }\r\n\r\n  hit = ()=> this.hits++;\r\n  isSunk = () => this.sunk = (this.hits === this.length);\r\n}\r\n\r\nexport default Ship;","import Ship from './Ship';\r\n\r\nclass GameBoard{\r\n  constructor(size){\r\n    this.size = size;\r\n    this.board = this.createBoard(this.size);\r\n    this.ships = this.createShips();\r\n  }\r\n\r\n  createShips = ()=> [new Ship(5,'A'),new Ship(4,'B'),new Ship(3,'C'), new Ship(3,'S'), new Ship(2,'D')];\r\n\r\n  createBoard = (size)=> new Array(size).fill().map(()=> new Array(size).fill(0));\r\n\r\n  resetBoard = ()=> this.board.map(row => row.fill(0));\r\n\r\n  checkAttack = (y,x)=>( this.board[y][x] === 1 || this.board[y][x] === 'X');\r\n\r\n  findShip = (y,x) => this.ships.find(ship => ship.symbol === this.board[y][x]);\r\n\r\n  receiveAttack = (y,x)=>{\r\n    if(this.checkAttack(y,x))return;\r\n\r\n    const msgHit = ['Direct hit! The enemy ship is on fire!','Target locked and hit! The ship is damaged!','Bullseye! The enemy fleet is shaking!','Success! Enemy vessel struck with precision!','Impact confirmed! Heavy damage inflicted!'];\r\n\r\n    const msgSunk = ['You sank the enemy ship! The seas are yours!','Ship down! The enemy fleet is falling apart!','Victory! You have sent the ship to the depths!','Another vessel destroyed! The tides are turning!','The enemy ship is no more! The waves are quiet for now...'];\r\n\r\n    const msgFail = ['Missed! The shot splashes into the empty waters','Miss! The sea mocks your aim','No hit! The enemy ship remains unscathed','Splash! Just water, no ships here','Empty ocean… better luck next time!'];\r\n\r\n    let msg;\r\n    const random = Math.floor(Math.random() * msgHit.length);\r\n    const ship = this.findShip(y,x);\r\n\r\n    if(ship && !ship.sunk){\r\n      ship.hit();\r\n      ship.isSunk();\r\n      msg = ship.sunk? msgSunk[random] :  msgHit[random];\r\n      this.board[y][x] = 1;\r\n      return{symbol: ship.symbol, message: msg};\r\n    }\r\n    else{\r\n      this.board[y][x] = 'X';\r\n      msg = msgFail[random];\r\n      return msg;\r\n    }\r\n\r\n  };\r\n\r\n  checkNeighbors = (x, y) => {\r\n    const directions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1],\r\n      [-1, -1],\r\n      [1, -1],\r\n      [-1, 1],\r\n      [1, 1]\r\n    ];\r\n\r\n    for (const [dx, dy] of directions) {\r\n      const nx = x + dx;\r\n      const ny = y + dy;\r\n      if (\r\n        nx >= 0 &&\r\n        ny >= 0 &&\r\n        nx < this.board[0].length &&\r\n        ny < this.board.length &&\r\n        this.board[ny][nx] !== 0\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  checkPosition = (ship, x, y, orientation) => {\r\n\r\n    if (orientation === 'horizontal') {\r\n\r\n      if (ship.length + x > this.board[0].length) return false;\r\n\r\n      for (let i = 0; i < ship.length; i++) {\r\n        if (this.board[y][x + i] !== 0 || !this.checkNeighbors( x + i, y)) {\r\n          return false;\r\n        }\r\n      }\r\n    } else if (orientation === 'vertical') {\r\n      if (ship.length + y > this.board.length) return false;\r\n\r\n      for (let i = 0; i < ship.length; i++) {\r\n        if (this.board[y + i][x] !== 0 || !this.checkNeighbors( x, y + i)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n\r\n  placeShips = () => {\r\n\r\n    this.ships.forEach(ship => {\r\n      const orientation = Math.random() > .5? 'horizontal' : 'vertical';\r\n\r\n      while (!ship.isPlaced) {\r\n        const x = Math.floor(Math.random() * this.board[0].length);\r\n        const y = Math.floor(Math.random() * this.board.length);\r\n        if (this.checkPosition(ship, x, y,orientation)) {\r\n          if (orientation === 'horizontal') {\r\n            for (let i = 0; i < ship.length; i++) {\r\n              this.board[y][x + i] = ship.symbol;\r\n            }\r\n          } else if (orientation === 'vertical') {\r\n            for (let i = 0; i < ship.length; i++) {\r\n              this.board[y + i][x] = ship.symbol;\r\n            }\r\n          }\r\n          ship.isPlaced = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  displaceShips = ()=> this.ships.forEach(ship => ship.isPlaced = false);\r\n\r\n  resetShipsHits = ()=> this.ships.forEach(ship => ship.hits = 0);\r\n}\r\n\r\n\r\nexport default GameBoard;","class UI{\r\n  constructor(){\r\n    this._currentShip = null;\r\n    this.markedCells = [];\r\n    this.angle = 0;\r\n    this.gameStarted = false;\r\n    this.gameOver = false;\r\n    this.refHitComputer = null;\r\n  }\r\n  get currentShip() {\r\n    return this._currentShip;\r\n  }\r\n\r\n  set currentShip(ship) {\r\n    this._currentShip = ship;\r\n  }\r\n\r\n  flip = (shipsDrags)=>{\r\n    this.angle = this.angle === 90? 0 : 90;\r\n    shipsDrags.forEach(ship => ship.style.transform = `rotate(${this.angle}deg)`);\r\n  };\r\n\r\n\r\n  flag = ()=>{\r\n    const flag = document.createElement('SPAN');\r\n    flag.classList.add('flag');\r\n    return flag;\r\n  };\r\n\r\n  showError = (msg,container)=>{\r\n    if(container.querySelector('.error'))return;\r\n    const error = document.createElement('P');\r\n    error.classList.add('error');\r\n    error.textContent = msg;\r\n    container.appendChild(error);\r\n    setTimeout(()=>error.remove(),4000);\r\n  };\r\n\r\n  insertRandomlyShips = (board,grid)=>{\r\n    const size = board.length;\r\n\r\n    for(let i = 0; i < size; i++){\r\n      for(let j = 0; j < size; j++){\r\n        if(board[i][j] !== 0){\r\n          const cell = grid.querySelector(`[data-y=\"${i}\"][data-x=\"${j}\"]`);\r\n          cell.classList.add(`ship-${board[i][j]}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  clearBoard = (grid)=>{\r\n\r\n    const blockShips = grid.querySelectorAll('[class*=\"ship-\"]');\r\n\r\n    const regex = /^ship-/;\r\n\r\n    blockShips.forEach(cell =>{\r\n\r\n      cell.classList.forEach(className =>{\r\n        if(regex.test(className)){\r\n          cell.classList.remove(className);\r\n        }\r\n      });\r\n\r\n    });\r\n\r\n  };\r\n\r\n  paintRandomlyShips = (boardPlayer,containerShipsDrag,grid)=>{\r\n    const someOnePlaced = boardPlayer.ships.some(ship => ship.isPlaced);\r\n\r\n    if(someOnePlaced){\r\n      boardPlayer.displaceShips();\r\n      boardPlayer.resetBoard();\r\n      this.clearBoard(grid);\r\n    }\r\n\r\n    boardPlayer.placeShips();\r\n    this.insertRandomlyShips(boardPlayer.board,grid);\r\n\r\n    if(!containerShipsDrag.classList.contains('anim-dissapear')){\r\n      containerShipsDrag.classList.add('anim-disappear');\r\n      setTimeout(()=>containerShipsDrag.style.display ='none',400);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  dragStart = (e, boardShips)=>{\r\n    e.target.classList.add('dragging-original-el');\r\n    this.currentShip = boardShips.find(ship => ship.symbol === e.target.dataset.ship);\r\n    e.dataTransfer.setData('type-ship', e.target.dataset.ship);\r\n  };\r\n\r\n  dragOver = (e,allBlocks,boardPlayer,angle)=>{\r\n    e.preventDefault();\r\n\r\n    if(e.target.classList.contains('cell') && e.target.classList.length <= 1){\r\n      const orientation = angle === 0? 'horizontal' : 'vertical';\r\n\r\n      if(boardPlayer.checkPosition(this.currentShip,Number(e.target.dataset.x),Number(e.target.dataset.y),orientation)){\r\n        const indexCell = allBlocks.findIndex(cell => cell === e.target);\r\n\r\n        for(let i = 0; i < this.currentShip.length; i++){\r\n          const offset = orientation === 'horizontal'? i : i * boardPlayer.board.length;\r\n          allBlocks[indexCell + offset].classList.add('dragging-target');\r\n          if (!this.markedCells.includes(allBlocks[indexCell + offset])) {\r\n            this.markedCells.push(allBlocks[indexCell + offset]);\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n  };\r\n\r\n  dragDrop = (e, boardPlayer, angle, grid)=>{\r\n    e.preventDefault();\r\n    if(boardPlayer.ships.every(ship => ship.isPlaced))return;\r\n    if(!e.target.classList.contains('cell'))return;\r\n\r\n    e.target.classList.remove('dragging-target');\r\n    const y = parseInt(e.target.dataset.y);\r\n    const x = parseInt(e.target.dataset.x);\r\n    const orientation = angle === 0? 'horizontal' : 'vertical';\r\n    const shipTransfer = e.dataTransfer.getData('type-ship');\r\n    const ship = boardPlayer.ships.find(ship => ship.symbol === shipTransfer);\r\n\r\n\r\n    if(boardPlayer.checkPosition(ship,x,y,orientation)){\r\n      for(let i = 0; i < ship.length; i++){\r\n        orientation === 'horizontal'?  boardPlayer.board[y][x+i] = ship.symbol :  boardPlayer.board[y + i][x] = ship.symbol;\r\n      }\r\n    }else return;\r\n\r\n    this.insertRandomlyShips(boardPlayer.board, grid);\r\n    document.querySelector(`[data-ship=\"${shipTransfer}\"]`).style.display ='none';\r\n    ship.isPlaced = true;\r\n\r\n  };\r\n\r\n  dragLeave = ()=>{\r\n\r\n    if(this.markedCells.length <= 0)return;\r\n    this.markedCells.forEach(block => block.classList.remove('dragging-target'));\r\n  };\r\n\r\n  dragEnd = (e,allBlocks,boardPlayer,containerShipsDrag)=>{\r\n    e.target.classList.remove('dragging-original-el');\r\n    allBlocks.forEach(block => {\r\n      if(block.classList.contains('dragging-target')){\r\n        block.classList.remove('dragging-target');\r\n      }\r\n    });\r\n\r\n    if(boardPlayer.ships.every(ship => ship.isPlaced)){\r\n      containerShipsDrag.classList.add('anim-disappear');\r\n      setTimeout(()=>containerShipsDrag.style.display ='none',400);\r\n    }\r\n    this.markedCells = [];\r\n    this.currentShip = null;\r\n  };\r\n\r\n  resetGame = (player,computer,boardPlayer,boardComputer,playBTN,randomBTN,restartBTN,containerDragShips,textMessage,previewShips,textTurn)=>{\r\n\r\n    playBTN.classList.remove('disabled-btn');\r\n    randomBTN.classList.remove('disabled-btn');\r\n    boardComputer.displaceShips();\r\n    boardPlayer.displaceShips();\r\n    boardComputer.resetBoard();\r\n    boardPlayer.resetBoard();\r\n    player.clearGrid();\r\n    computer.clearGrid();\r\n    boardComputer.resetShipsHits();\r\n    boardPlayer.resetShipsHits();\r\n    this.clearBoard(player.grid);\r\n    this.clearBoard(computer.grid);\r\n    this.gameStarted = false;\r\n    this.gameOver = false;\r\n    textMessage.textContent = '';\r\n    textTurn.textContent = '';\r\n    containerDragShips.style.display = 'flex';\r\n    containerDragShips.classList.remove('anim-disappear');\r\n    computer.turn = false;\r\n    player.turn = true;\r\n    boardComputer.placeShips();\r\n    restartBTN.classList.add('disabled-btn');\r\n    this.angle = 0;\r\n    previewShips.forEach(previewShip => {\r\n      previewShip.style.display = 'block';\r\n      previewShip.style.transform = `rotate(${this.angle}deg)`;\r\n    });\r\n\r\n  };\r\n}\r\n\r\nexport default UI;\r\n","\r\nclass Player{\r\n\r\n  constructor(player,id,gameBoard, turn){\r\n    this.player = player;\r\n    this.id = id;\r\n    this.turn = turn;\r\n    this.gameBoard = gameBoard;\r\n    this.grid = this.createGrid();\r\n    this.ships = this.gameBoard.ships;\r\n    this.winner = false;\r\n    this.remainingCells = [...this.grid.children];\r\n  }\r\n\r\n\r\n  clearGrid = ()=>{\r\n    this.remainingCells = [...this.grid.children];\r\n    this.remainingCells.forEach(cell =>{\r\n      if(cell.classList.contains('splash-cell')){\r\n        cell.classList.remove('splash-cell');\r\n      }\r\n\r\n      if(this.id !== 'player'){\r\n        if(!cell.classList.contains('cell-enemy')){\r\n          cell.classList.add('cell-enemy');\r\n        }\r\n      }\r\n\r\n      if(cell.firstChild){\r\n        cell.removeChild(cell.firstChild);\r\n      }\r\n    });\r\n\r\n\r\n  };\r\n  createGrid = ()=>{\r\n\r\n    const size = this.gameBoard.board.length;\r\n    const board = document.createElement('DIV');\r\n    board.id = this.id;\r\n    board.classList.add('board');\r\n\r\n    for(let i = 0; i < size; i++){\r\n\r\n      for(let j = 0; j < size; j++){\r\n\r\n        const cell = document.createElement('DIV');\r\n        cell.classList.add('cell');\r\n        if(this.id !== 'player') cell.classList.add('cell-enemy');\r\n        cell.dataset.y= i;\r\n        cell.dataset.x = j;\r\n        board.appendChild(cell);\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  attack = (cell,player,textMessage,flag)=>{\r\n\r\n    const cellHit = player.remainingCells.findIndex(block => block.dataset.x === cell.dataset.x && block.dataset.y === cell.dataset.y);\r\n\r\n    if(cellHit === -1)return;\r\n\r\n\r\n    const block = player.remainingCells[cellHit];\r\n    const y = block.dataset.y;\r\n    const x = block.dataset.x;\r\n    const resultsAttack = player.gameBoard.receiveAttack(y,x);\r\n\r\n    if(typeof resultsAttack === 'object'){\r\n\r\n      if(this.id === 'player'){\r\n        block.classList.remove('cell-enemy');\r\n        block.classList.add(`ship-${resultsAttack.symbol}`);\r\n      }\r\n      block.appendChild(flag);\r\n      textMessage.textContent = `${this.player}: ${resultsAttack.message}`;\r\n    }\r\n    else{\r\n      textMessage.textContent = `${this.player}: ${resultsAttack}`;\r\n      block.classList.add('splash-cell');\r\n    }\r\n\r\n\r\n    player.remainingCells.splice(cellHit,1);\r\n    if(this.isLoose()){\r\n      player.winner = true;\r\n      textMessage.textContent = player.resultsWinner();\r\n      return;\r\n    }\r\n\r\n    this.turn = false;\r\n  };\r\n\r\n\r\n  turnOf = ()=> this.player + ' turn';\r\n\r\n  isLoose = ()=> this.ships.every(ship => ship.sunk);\r\n\r\n  resultsWinner = ()=> this.player + ' Wins!';\r\n}\r\n\r\n\r\nexport default Player;","import '../styles.css';\r\nimport GameBoard from './GameBoard';\r\nimport UI from './UI';\r\nimport Player from './Player';\r\n\r\ndocument.addEventListener('DOMContentLoaded',()=>{\r\n  const $ = el => document.querySelector(el);\r\n  const $$ = el => document.getElementById(el);\r\n\r\n  const textTurn = $('.text-turn');\r\n  const textMessage = $('.text-message');\r\n  const containerDefault = $('.container-default');\r\n  const containerBoard = $$('container-board');\r\n  const containerShipsDrag = $('.ships');\r\n  const shipsDragDom = Array.from(containerShipsDrag.querySelectorAll('[data-ship]'));\r\n  const randomBTN = $$('random-btn');\r\n  const flipBTN = $$('flip-btn');\r\n  const playBTN = $$('play-btn');\r\n  const restartBTN = $$('restart-btn');\r\n\r\n\r\n  //Unique instance UI\r\n  const userInterface = new UI();\r\n\r\n  //Create Board Instance\r\n  const boardPlayer = new GameBoard(10);\r\n  const boardComputer = new GameBoard(10);\r\n\r\n  //Create Players Intances\r\n  // eslint-disable-next-line quotes\r\n  const player = new Player(\"Player's\",'player',boardPlayer,true);\r\n  // eslint-disable-next-line quotes\r\n  const computer = new Player(\"Computer's\",'computer',boardComputer,false);\r\n\r\n  //Create grids dom\r\n  containerBoard.append(player.grid,computer.grid);\r\n\r\n  //Place Ships Computer Board\r\n  boardComputer.placeShips();\r\n\r\n  //Get All blocks childrens Board Player\r\n  const allBlocks = Array.from(player.grid.children);\r\n\r\n\r\n\r\n  const startGame = ()=>{\r\n    if(userInterface.gameStarted)return;\r\n\r\n    if(!boardPlayer.ships.every(ship => ship.isPlaced)){\r\n      userInterface.showError('You must place your ships to start the game!',containerDefault);\r\n      return;\r\n    }\r\n    randomBTN.classList.add('disabled-btn');\r\n    restartBTN.classList.remove('disabled-btn');\r\n\r\n    const error = containerDefault.querySelector('.error');\r\n    if(error) error.remove();\r\n\r\n    setTimeout(()=>textTurn.textContent = player.turnOf(),500);\r\n    userInterface.gameStarted = true;\r\n    playBTN.classList.add('disabled-btn');\r\n  };\r\n\r\n  const computerAttack = ()=>{\r\n\r\n    const maxRandom = player.remainingCells.length;\r\n    const randomCell = Math.floor(Math.random() * maxRandom);\r\n    const cell = player.remainingCells[randomCell];\r\n\r\n    computer.attack(cell,player,textMessage,userInterface.flag());\r\n\r\n    if(computer.winner){\r\n      userInterface.gameOver = true;\r\n      textTurn.textContent = '';\r\n      return;\r\n    };\r\n\r\n    setTimeout(()=>{\r\n      if(!userInterface.gameStarted)return;\r\n      textTurn.textContent = player.turnOf();\r\n      player.turn = true;\r\n\r\n    },1000);\r\n\r\n  };\r\n\r\n  const handleAttack = (e)=>{\r\n    if(!userInterface.gameStarted || userInterface.gameOver)return;\r\n    if(!e.target.classList.contains('cell')) return;\r\n    if(!player.turn)return;\r\n\r\n    if(player.turn && !computer.turn){\r\n\r\n      player.attack(e.target,computer,textMessage,userInterface.flag());\r\n\r\n      if(player.winner){\r\n        textTurn.textContent = '';\r\n        userInterface.gameOver = true;\r\n        return;\r\n      };\r\n\r\n      if(!userInterface.gameStarted)return;\r\n      textTurn.textContent = computer.turnOf();\r\n      computer.turn = true;\r\n    }\r\n    setTimeout(()=>{\r\n      if(!player.turn && computer.turn)computerAttack();\r\n    },1000);\r\n  };\r\n\r\n  //Register init events\r\n  registerEvents();\r\n\r\n  function registerEvents(){\r\n\r\n    //Start drag\r\n    shipsDragDom.forEach(ship => ship.addEventListener('dragstart',(e)=>userInterface.dragStart(e,boardPlayer.ships)));\r\n\r\n    //Over drag\r\n    player.grid.addEventListener('dragover',(e)=>userInterface.dragOver(e,allBlocks,boardPlayer,userInterface.angle));\r\n\r\n    //Drag drop\r\n    player.grid.addEventListener('drop',(e)=>userInterface.dragDrop(e,boardPlayer,userInterface.angle,player.grid));\r\n\r\n    //Drag Leave\r\n    player.grid.addEventListener('dragleave',userInterface.dragLeave);\r\n\r\n    //End drag\r\n    shipsDragDom.forEach(ship => ship.addEventListener('dragend',(e)=>userInterface.dragEnd(e,allBlocks,boardPlayer,containerShipsDrag)));\r\n\r\n    //Flip ships\r\n    flipBTN.addEventListener('click',()=>userInterface.flip(shipsDragDom));\r\n\r\n    //Insert Ships Player Randomly\r\n    randomBTN.addEventListener('click',()=> userInterface.paintRandomlyShips(boardPlayer,containerShipsDrag,player.grid));\r\n\r\n    playBTN.addEventListener('click',startGame);\r\n\r\n    computer.grid.addEventListener('click', handleAttack);\r\n\r\n    restartBTN.addEventListener('click',()=> userInterface.resetGame(player,computer,boardPlayer,boardComputer,playBTN,randomBTN,restartBTN,containerShipsDrag,textMessage,shipsDragDom,textTurn));\r\n  };\r\n\r\n});\r\n\r\n"],"names":["constructor","length","symbol","this","hits","sunk","isPlaced","hit","isSunk","size","board","createBoard","ships","createShips","Array","fill","map","resetBoard","row","checkAttack","y","x","findShip","find","ship","receiveAttack","msgHit","msg","random","Math","floor","message","checkNeighbors","directions","dx","dy","nx","ny","checkPosition","orientation","i","placeShips","forEach","displaceShips","resetShipsHits","_currentShip","markedCells","angle","gameStarted","gameOver","refHitComputer","currentShip","flip","shipsDrags","style","transform","flag","document","createElement","classList","add","showError","container","querySelector","error","textContent","appendChild","setTimeout","remove","insertRandomlyShips","grid","j","clearBoard","blockShips","querySelectorAll","regex","cell","className","test","paintRandomlyShips","boardPlayer","containerShipsDrag","some","contains","display","dragStart","e","boardShips","target","dataset","dataTransfer","setData","dragOver","allBlocks","preventDefault","Number","indexCell","findIndex","offset","includes","push","dragDrop","every","parseInt","shipTransfer","getData","dragLeave","block","dragEnd","resetGame","player","computer","boardComputer","playBTN","randomBTN","restartBTN","containerDragShips","textMessage","previewShips","textTurn","clearGrid","turn","previewShip","id","gameBoard","createGrid","winner","remainingCells","children","firstChild","removeChild","attack","cellHit","resultsAttack","splice","isLoose","resultsWinner","turnOf","addEventListener","$","el","$$","getElementById","containerDefault","containerBoard","shipsDragDom","from","flipBTN","userInterface","append","maxRandom","randomCell","computerAttack"],"sourceRoot":""}